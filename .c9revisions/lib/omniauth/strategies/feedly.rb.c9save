{"ts":1374779187361,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1374780118889,"patch":[[{"diffs":[[1,"require 'omniauth/strategies/oauth2'\nrequire 'base64'\nrequire 'openssl'\nrequire 'rack/utils'\n\nmodule OmniAuth\n  module Strategies\n    class Feedly < OmniAuth::Strategies::OAuth2\n    class NoAuthorizationCodeError < StandardError; end\n      \n    DEFAULT_SCOPE = 'https://cloud.feedly.com/subscriptions'\n    \n    option :client_options, {\n      :site => 'http://cloud.feedly.com',\n      :authorize_url => 'http://cloud.feedly.com/v3/auth/auth',\n      :token_url => '/v3/auth/token'\n    }\n    \n    option :token_params, {\n      :parse => :query\n    }\n    \n    option :acess_token_options, {\n      :header_format => 'OAuth %s',\n      :param_name => 'access_token'\n    }\n    \n    option :authorize_options [:scope, :display, :auth_type]"]],"start1":0,"start2":0,"length1":0,"length2":731}]],"length":731,"saved":false}
{"ts":1374780293589,"patch":[[{"diffs":[[0,"ptions'\n"],[1,"    DEFAULT_RESPONSE_TYPE = 'code'\n"],[0,"    \n   "]],"start1":294,"start2":294,"length1":16,"length2":51},{"diffs":[[0,"cope"],[-1,", :display, :auth_type]"],[1,"]\n    \n    code {raw_info['code']}"]],"start1":739,"start2":739,"length1":27,"length2":38}]],"length":777,"saved":false}
{"ts":1374781138875,"patch":[[{"diffs":[[0,"ptions ["],[1,":response_type, "],[0,":scope]\n"]],"start1":729,"start2":729,"length1":16,"length2":32},{"diffs":[[0,"'code']}"],[1,"\n    \n    "]],"start1":785,"start2":785,"length1":8,"length2":18}]],"length":803,"saved":false}
{"ts":1374781189444,"patch":[[{"diffs":[[0,":OAuth2\n    "],[1,"  "],[0,"class NoAuth"]],"start1":170,"start2":170,"length1":24,"length2":26},{"diffs":[[0," end\n      \n"],[1,"  "],[0,"    DEFAULT_"]],"start1":231,"start2":231,"length1":24,"length2":26},{"diffs":[[0,"ptions'\n    "],[1,"  "],[0,"DEFAULT_RESP"]],"start1":298,"start2":298,"length1":24,"length2":26},{"diffs":[[0," 'code'\n    "],[1,"  "],[0,"\n    "],[1,"  "],[0,"option :clie"]],"start1":335,"start2":335,"length1":29,"length2":33},{"diffs":[[0,"_options, {\n"],[1,"  "],[0,"      :site "]],"start1":370,"start2":370,"length1":24,"length2":26},{"diffs":[[0,",\n      "],[1,"  "],[0,":authori"]],"start1":424,"start2":424,"length1":16,"length2":18},{"diffs":[[0,"/auth',\n"],[1,"  "],[0,"      :t"]],"start1":484,"start2":484,"length1":16,"length2":18},{"diffs":[[0,"auth/token'\n    "],[1,"  "],[0,"}\n    "],[1," "],[-1,"\n"],[1," \n  "],[0,"    option :toke"]],"start1":519,"start2":519,"length1":39,"length2":45},{"diffs":[[0,"n_params, {\n"],[1,"  "],[0,"      :parse"]],"start1":564,"start2":564,"length1":24,"length2":26},{"diffs":[[0," :query\n    "],[1,"  "],[0,"}\n    "],[1," "],[-1,"\n"],[1," \n  "],[0,"    option :"]],"start1":593,"start2":593,"length1":31,"length2":37},{"diffs":[[0,"{\n      "],[1," "],[1," "],[0,":header_"]],"start1":651,"start2":651,"length1":16,"length2":18},{"diffs":[[0,"th %s',\n"],[1,"  "],[0,"      :p"]],"start1":683,"start2":683,"length1":16,"length2":18},{"diffs":[[0,"en'\n    "],[1," "],[1," "],[0,"}\n    "],[-1,"\n"],[1,"  \n "],[0,"    "],[1," "],[0,"option :"]],"start1":725,"start2":725,"length1":27,"length2":33},{"diffs":[[0,":scope]\n    "],[-1,"\n"],[1,"  \n  "],[0,"    code {ra"]],"start1":793,"start2":793,"length1":25,"length2":29},{"diffs":[[0,"code']}\n"],[1,"    end\n  end\nend\n"],[0,"    \n   "]],"start1":830,"start2":830,"length1":16,"length2":34}]],"length":865,"saved":false}
{"ts":1374781850396,"patch":[[{"diffs":[[0,"code']}\n"],[1,"      \n      def raw_info\n        @raw_info ||= access_token.post('/v3/auth/token', info_options).parsed || {}\n      end\n      \n      def info_options\n        options[:info_fields] ? {:params => {:fields => options[:info_fields]}} : {}\n      end\n      \n      def build_access_token\n        if access_token = request.params[\"access_token\"]\n          ::OAuth2::AccessToken.from_hash(\n            client,\n            {\"access_token\" => access_token}.update(access_token_options)\n          )\n      elsif signed_request_contains_access_token?\n        hash = signed_request.clone\n        ::OAuth2::AccessToken.new(\n          client,\n          hash.delete('oauth_token'),\n          hash.merge!(access_token_options.merge(:expires_at => hash.delete('expires')))\n        )\n      else\n        with_authorization_code! {super}.tap do |token|\n          token.options.merge!(access_token_options)\n        end\n      end\n"],[0,"    end\n"]],"start1":830,"start2":830,"length1":16,"length2":922}]],"length":1771,"saved":false}
